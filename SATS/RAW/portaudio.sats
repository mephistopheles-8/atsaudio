(** Generated by [c2ats-ats2] **)

%{#
#ifndef _PORTAUDIO_ATS2_PORTAUDIO_SATS
#define _PORTAUDIO_ATS2_PORTAUDIO_SATS

#include <portaudio.h>

#define _portaudio_ats2_lor(x,y) ((x) | (y))
#define _portaudio_ats2_lhas(x,y) (((x) & (y)) != 0)
#define _portaudio_ats2_eq(x,y) ((x) == (y))
#define _portaudio_ats2_neq(x,y) ((x) != (y))

#define Pa_GetErrorText(x) (void *)Pa_GetErrorText(x)

#endif
%}
(**  **)

macdef paInputOverflow = $extval(int,"paInputOverflow")
macdef paFormatIsSupported = $extval(int,"paFormatIsSupported")
macdef paOutputOverflow = $extval(int,"paOutputOverflow")
macdef paCustomFormat = $extval(int,"paCustomFormat")
macdef paUseHostApiSpecificDeviceSpecification = $extval(int,"paUseHostApiSpecificDeviceSpecification")
macdef paNonInterleaved = $extval(int,"paNonInterleaved")
macdef paFramesPerBufferUnspecified = $extval(int,"paFramesPerBufferUnspecified")
macdef paNoDevice = $extval(int,"paNoDevice")
macdef paOutputUnderflow = $extval(int,"paOutputUnderflow")
macdef paMakeVersionNumber(major,minor,subminor) = $extval(int,"paMakeVersionNumber(major,minor,subminor)")
macdef paInputUnderflow = $extval(int,"paInputUnderflow")
macdef paPrimingOutput = $extval(int,"paPrimingOutput")

fun Pa_GetVersion() : int = "mac#"

fun Pa_GetVersionText() : cPtr0(char) = "mac#"

typedef PaVersionInfo = $extype_struct"PaVersionInfo" of {
   versionMajor = int
 , versionMinor = int
 , versionSubMinor = int
 , versionControlRevision = cPtr0(char)
 , versionText = cPtr0(char)
}

fun Pa_GetVersionInfo() : cPtr0(PaVersionInfo) = "mac#"

typedef PaError = $extype"PaError"

abst@ype PaErrorCode = $extype"PaErrorCode"

macdef paNoError = $extval(PaErrorCode,"paNoError")
macdef paNotInitialized = $extval(PaErrorCode,"paNotInitialized")
macdef paUnanticipatedHostError = $extval(PaErrorCode,"paUnanticipatedHostError")
macdef paInvalidChannelCount = $extval(PaErrorCode,"paInvalidChannelCount")
macdef paInvalidSampleRate = $extval(PaErrorCode,"paInvalidSampleRate")
macdef paInvalidDevice = $extval(PaErrorCode,"paInvalidDevice")
macdef paInvalidFlag = $extval(PaErrorCode,"paInvalidFlag")
macdef paSampleFormatNotSupported = $extval(PaErrorCode,"paSampleFormatNotSupported")
macdef paBadIODeviceCombination = $extval(PaErrorCode,"paBadIODeviceCombination")
macdef paInsufficientMemory = $extval(PaErrorCode,"paInsufficientMemory")
macdef paBufferTooBig = $extval(PaErrorCode,"paBufferTooBig")
macdef paBufferTooSmall = $extval(PaErrorCode,"paBufferTooSmall")
macdef paNullCallback = $extval(PaErrorCode,"paNullCallback")
macdef paBadStreamPtr = $extval(PaErrorCode,"paBadStreamPtr")
macdef paTimedOut = $extval(PaErrorCode,"paTimedOut")
macdef paInternalError = $extval(PaErrorCode,"paInternalError")
macdef paDeviceUnavailable = $extval(PaErrorCode,"paDeviceUnavailable")
macdef paIncompatibleHostApiSpecificStreamInfo = $extval(PaErrorCode,"paIncompatibleHostApiSpecificStreamInfo")
macdef paStreamIsStopped = $extval(PaErrorCode,"paStreamIsStopped")
macdef paStreamIsNotStopped = $extval(PaErrorCode,"paStreamIsNotStopped")
macdef paInputOverflowed = $extval(PaErrorCode,"paInputOverflowed")
macdef paOutputUnderflowed = $extval(PaErrorCode,"paOutputUnderflowed")
macdef paHostApiNotFound = $extval(PaErrorCode,"paHostApiNotFound")
macdef paInvalidHostApi = $extval(PaErrorCode,"paInvalidHostApi")
macdef paCanNotReadFromACallbackStream = $extval(PaErrorCode,"paCanNotReadFromACallbackStream")
macdef paCanNotWriteToACallbackStream = $extval(PaErrorCode,"paCanNotWriteToACallbackStream")
macdef paCanNotReadFromAnOutputOnlyStream = $extval(PaErrorCode,"paCanNotReadFromAnOutputOnlyStream")
macdef paCanNotWriteToAnInputOnlyStream = $extval(PaErrorCode,"paCanNotWriteToAnInputOnlyStream")
macdef paIncompatibleStreamHostApi = $extval(PaErrorCode,"paIncompatibleStreamHostApi")
macdef paBadBufferPtr = $extval(PaErrorCode,"paBadBufferPtr")

fn eq_PaError_PaErrorCode( PaError, PaErrorCode ) :<> bool = "mac#_portaudio_ats2_eq"

fn eq_PaErrorCode_PaError( PaErrorCode, PaError ) :<> bool = "mac#_portaudio_ats2_eq"

fn eq_PaErrorCode_PaErrorCode( PaErrorCode, PaErrorCode ) :<> bool = "mac#_portaudio_ats2_eq"

fn eq_PaError_PaError( PaError, PaError ) :<> bool = "mac#_portaudio_ats2_eq"

castfn PaError_PaErrorCode( PaError ) :<> PaErrorCode
castfn PaErrorCode_PaError( PaErrorCode ) :<> PaError

overload PaErrorCode with PaError_PaErrorCode
overload PaError with PaErrorCode_PaError

overload = with eq_PaError_PaErrorCode
overload = with eq_PaErrorCode_PaError
overload = with eq_PaErrorCode_PaErrorCode
overload = with eq_PaError_PaError

fun Pa_GetErrorText(PaError) : string = "mac#"

fun Pa_Initialize() : PaError = "mac#"

fun Pa_Terminate() : PaError = "mac#"

typedef PaDeviceIndex = $extype"PaDeviceIndex"

typedef PaHostApiIndex = $extype"PaHostApiIndex"

fun Pa_GetHostApiCount() : PaHostApiIndex = "mac#"

fun Pa_GetDefaultHostApi() : PaHostApiIndex = "mac#"

abst@ype PaHostApiTypeId = $extype"PaHostApiTypeId"

macdef paInDevelopment = $extval(PaHostApiTypeId,"paInDevelopment")
macdef paDirectSound = $extval(PaHostApiTypeId,"paDirectSound")
macdef paMME = $extval(PaHostApiTypeId,"paMME")
macdef paASIO = $extval(PaHostApiTypeId,"paASIO")
macdef paSoundManager = $extval(PaHostApiTypeId,"paSoundManager")
macdef paCoreAudio = $extval(PaHostApiTypeId,"paCoreAudio")
macdef paOSS = $extval(PaHostApiTypeId,"paOSS")
macdef paALSA = $extval(PaHostApiTypeId,"paALSA")
macdef paAL = $extval(PaHostApiTypeId,"paAL")
macdef paBeOS = $extval(PaHostApiTypeId,"paBeOS")
macdef paWDMKS = $extval(PaHostApiTypeId,"paWDMKS")
macdef paJACK = $extval(PaHostApiTypeId,"paJACK")
macdef paWASAPI = $extval(PaHostApiTypeId,"paWASAPI")
macdef paAudioScienceHPI = $extval(PaHostApiTypeId,"paAudioScienceHPI")
macdef paSndio = $extval(PaHostApiTypeId,"paSndio")

typedef PaHostApiInfo = $extype_struct"PaHostApiInfo" of {
   structVersion = int
 , type = PaHostApiTypeId
 , name = cPtr0(char)
 , deviceCount = int
 , defaultInputDevice = PaDeviceIndex
 , defaultOutputDevice = PaDeviceIndex
}

fun Pa_GetHostApiInfo(PaHostApiIndex) : cPtr0(PaHostApiInfo) = "mac#"

fun Pa_HostApiTypeIdToHostApiIndex(PaHostApiTypeId) : PaHostApiIndex = "mac#"

fun Pa_HostApiDeviceIndexToDeviceIndex(PaHostApiIndex, int) : PaDeviceIndex = "mac#"

typedef PaHostErrorInfo = $extype_struct"PaHostErrorInfo" of {
   hostApiType = PaHostApiTypeId
 , errorCode = lint
 , errorText = cPtr0(char)
}

fun Pa_GetLastHostErrorInfo() : cPtr0(PaHostErrorInfo) = "mac#"

fun Pa_GetDeviceCount() : PaDeviceIndex = "mac#"

fun Pa_GetDefaultInputDevice() : PaDeviceIndex = "mac#"

fun Pa_GetDefaultOutputDevice() : PaDeviceIndex = "mac#"

typedef PaTime = $extype"PaTime"

abst@ype PaSampleFormat = $extype"PaSampleFormat"

macdef paInt8 = $extval(PaSampleFormat,"paInt8")
macdef paUInt8 = $extval(PaSampleFormat,"paUInt8")
macdef paInt16 = $extval(PaSampleFormat,"paInt16")
macdef paInt24 = $extval(PaSampleFormat,"paInt24")
macdef paInt32 = $extval(PaSampleFormat,"paInt32")
macdef paFloat32 = $extval(PaSampleFormat,"paFloat32")

typedef PaDeviceInfo = $extype_struct"PaDeviceInfo" of {
   structVersion = int
 , name = cPtr0(char)
 , hostApi = PaHostApiIndex
 , maxInputChannels = int
 , maxOutputChannels = int
 , defaultLowInputLatency = PaTime
 , defaultLowOutputLatency = PaTime
 , defaultHighInputLatency = PaTime
 , defaultHighOutputLatency = PaTime
 , defaultSampleRate = double
}

fun Pa_GetDeviceInfo(PaDeviceIndex) : cPtr0(PaDeviceInfo) = "mac#"

typedef PaStreamParameters = $extype_struct"PaStreamParameters" of {
   device = PaDeviceIndex
 , channelCount = int
 , sampleFormat = PaSampleFormat
 , suggestedLatency = PaTime
 , hostApiSpecificStreamInfo = ptr
}

fun Pa_IsFormatSupported(cPtr0(PaStreamParameters), cPtr0(PaStreamParameters), double) : PaError = "mac#"

typedef PaStream = $extype"PaStream"

abst@ype PaStreamFlags = $extype"PaStreamFlags"

macdef paNoFlag = $extval(PaStreamFlags,"paNoFlag")
macdef paClipOff = $extval(PaStreamFlags,"paClipOff")
macdef paDitherOff = $extval(PaStreamFlags,"paDitherOff")
macdef paNeverDropInput = $extval(PaStreamFlags,"paNeverDropInput")
macdef paPrimeOutputBuffersUsingStreamCallback = $extval(PaStreamFlags,"paPrimeOutputBuffersUsingStreamCallback")
macdef paPlatformSpecificFlags = $extval(PaStreamFlags,"paPlatformSpecificFlags")

fn lor_PaStreamFlags_PaStreamFlags( PaStreamFlags, PaStreamFlags )
   :<> PaStreamFlags = "mac#_portaudio_ats2_lor" 

overload lor with lor_PaStreamFlags_PaStreamFlags


typedef PaStreamCallbackTimeInfo = $extype_struct"PaStreamCallbackTimeInfo" of {
   inputBufferAdcTime = PaTime
 , currentTime = PaTime
 , outputBufferDacTime = PaTime
}

typedef PaStreamCallbackFlags = $extype"PaStreamCallbackFlags"

abst@ype PaStreamCallbackResult = $extype"PaStreamCallbackResult"

macdef paContinue = $extval(PaStreamCallbackResult,"paContinue")
macdef paComplete = $extval(PaStreamCallbackResult,"paComplete")
macdef paAbort = $extval(PaStreamCallbackResult,"paAbort")

typedef PaStreamCallback = (ptr, ptr, ulint, cPtr0(PaStreamCallbackTimeInfo), PaStreamCallbackFlags, ptr) -> PaStreamCallbackResult

fun Pa_OpenStream(cPtr0(cPtr0(PaStream)), cPtr0(PaStreamParameters), cPtr0(PaStreamParameters), double, ulint, PaStreamFlags, PaStreamCallback, ptr) : PaError = "mac#"

fun Pa_OpenDefaultStream(cPtr0(cPtr0(PaStream)), int, int, PaSampleFormat, double, ulint, cPtr0(PaStreamCallback), ptr) : PaError = "mac#"

fun Pa_CloseStream(cPtr0(PaStream)) : PaError = "mac#"

typedef PaStreamFinishedCallback = (ptr) -> void

fun Pa_SetStreamFinishedCallback(cPtr0(PaStream), cPtr0(PaStreamFinishedCallback)) : PaError = "mac#"

fun Pa_StartStream(cPtr0(PaStream)) : PaError = "mac#"

fun Pa_StopStream(cPtr0(PaStream)) : PaError = "mac#"

fun Pa_AbortStream(cPtr0(PaStream)) : PaError = "mac#"

fun Pa_IsStreamStopped(cPtr0(PaStream)) : PaError = "mac#"

fun Pa_IsStreamActive(cPtr0(PaStream)) : PaError = "mac#"

typedef PaStreamInfo = $extype_struct"PaStreamInfo" of {
   structVersion = int
 , inputLatency = PaTime
 , outputLatency = PaTime
 , sampleRate = double
}

fun Pa_GetStreamInfo(cPtr0(PaStream)) : cPtr0(PaStreamInfo) = "mac#"

fun Pa_GetStreamTime(cPtr0(PaStream)) : PaTime = "mac#"

fun Pa_GetStreamCpuLoad(cPtr0(PaStream)) : double = "mac#"

fun Pa_ReadStream(cPtr0(PaStream), ptr, ulint) : PaError = "mac#"

fun Pa_WriteStream(cPtr0(PaStream), ptr, ulint) : PaError = "mac#"

fun Pa_GetStreamReadAvailable(cPtr0(PaStream)) : lint = "mac#"

fun Pa_GetStreamWriteAvailable(cPtr0(PaStream)) : lint = "mac#"

fun Pa_GetStreamHostApiType(cPtr0(PaStream)) : PaHostApiTypeId = "mac#"

fun Pa_GetSampleSize(PaSampleFormat) : PaError = "mac#"

fun Pa_Sleep(lint) : void = "mac#"

