(** Generated by [c2ats-ats2] **)

%{#
#include "jack/jack.h"
%}
(**  **)

typedef jack_native_thread_t = $extype"jack_native_thread_t"

typedef jack_uuid_t = $extype"jack_uuid_t"

typedef jack_shmsize_t = $extype"jack_shmsize_t"

typedef jack_nframes_t = $extype"jack_nframes_t"

typedef jack_time_t = $extype"jack_time_t"

typedef jack_intclient_t = $extype"jack_intclient_t"

typedef jack_port_t = $extype"jack_port_t"

typedef jack_client_t = $extype"jack_client_t"

typedef jack_port_id_t = $extype"jack_port_id_t"

typedef jack_port_type_id_t = $extype"jack_port_type_id_t"

abst@ype enum_JackOptions = $extype"enum JackOptions"

macdef JackNullOption = $extval(enum_JackOptions,"JackNullOption")
macdef JackNoStartServer = $extval(enum_JackOptions,"JackNoStartServer")
macdef JackUseExactName = $extval(enum_JackOptions,"JackUseExactName")
macdef JackServerName = $extval(enum_JackOptions,"JackServerName")
macdef JackLoadName = $extval(enum_JackOptions,"JackLoadName")
macdef JackLoadInit = $extval(enum_JackOptions,"JackLoadInit")
macdef JackSessionID = $extval(enum_JackOptions,"JackSessionID")

abst@ype jack_options_t = $extype"jack_options_t"


abst@ype enum_JackStatus = $extype"enum JackStatus"

macdef JackFailure = $extval(enum_JackStatus,"JackFailure")
macdef JackInvalidOption = $extval(enum_JackStatus,"JackInvalidOption")
macdef JackNameNotUnique = $extval(enum_JackStatus,"JackNameNotUnique")
macdef JackServerStarted = $extval(enum_JackStatus,"JackServerStarted")
macdef JackServerFailed = $extval(enum_JackStatus,"JackServerFailed")
macdef JackServerError = $extval(enum_JackStatus,"JackServerError")
macdef JackNoSuchClient = $extval(enum_JackStatus,"JackNoSuchClient")
macdef JackLoadFailure = $extval(enum_JackStatus,"JackLoadFailure")
macdef JackInitFailure = $extval(enum_JackStatus,"JackInitFailure")
macdef JackShmFailure = $extval(enum_JackStatus,"JackShmFailure")
macdef JackVersionError = $extval(enum_JackStatus,"JackVersionError")
macdef JackBackendError = $extval(enum_JackStatus,"JackBackendError")
macdef JackClientZombie = $extval(enum_JackStatus,"JackClientZombie")

abst@ype jack_status_t = $extype"jack_status_t"


abst@ype enum_JackLatencyCallbackMode = $extype"enum JackLatencyCallbackMode"

macdef JackCaptureLatency = $extval(enum_JackLatencyCallbackMode,"JackCaptureLatency")
macdef JackPlaybackLatency = $extval(enum_JackLatencyCallbackMode,"JackPlaybackLatency")

abst@ype jack_latency_callback_mode_t = $extype"jack_latency_callback_mode_t"


typedef JackLatencyCallback = (jack_latency_callback_mode_t, ptr) -> void

typedef struct__jack_latency_range = $extype_struct"struct _jack_latency_range" of {
   min = jack_nframes_t
 , max = jack_nframes_t
}

typedef jack_latency_range_t = $extype"jack_latency_range_t"

typedef JackProcessCallback = (jack_nframes_t, ptr) -> int

typedef JackThreadCallback = (ptr) -> ptr

typedef JackThreadInitCallback = (ptr) -> void

typedef JackGraphOrderCallback = (ptr) -> int

typedef JackXRunCallback = (ptr) -> int

typedef JackBufferSizeCallback = (jack_nframes_t, ptr) -> int

typedef JackSampleRateCallback = (jack_nframes_t, ptr) -> int

typedef JackPortRegistrationCallback = (jack_port_id_t, int, ptr) -> void

typedef JackClientRegistrationCallback = (cPtr0(char), int, ptr) -> void

typedef JackPortConnectCallback = (jack_port_id_t, jack_port_id_t, int, ptr) -> void

typedef JackPortRenameCallback = (jack_port_id_t, cPtr0(char), cPtr0(char), ptr) -> void

typedef JackFreewheelCallback = (int, ptr) -> void

typedef JackShutdownCallback = (ptr) -> void

typedef JackInfoShutdownCallback = (jack_status_t, cPtr0(char), ptr) -> void

typedef jack_default_audio_sample_t = $extype"jack_default_audio_sample_t"

abst@ype enum_JackPortFlags = $extype"enum JackPortFlags"

macdef JackPortIsInput = $extval(enum_JackPortFlags,"JackPortIsInput")
macdef JackPortIsOutput = $extval(enum_JackPortFlags,"JackPortIsOutput")
macdef JackPortIsPhysical = $extval(enum_JackPortFlags,"JackPortIsPhysical")
macdef JackPortCanMonitor = $extval(enum_JackPortFlags,"JackPortCanMonitor")
macdef JackPortIsTerminal = $extval(enum_JackPortFlags,"JackPortIsTerminal")

abst@ype jack_transport_state_t = $extype"jack_transport_state_t"

macdef JackTransportStopped = $extval(jack_transport_state_t,"JackTransportStopped")
macdef JackTransportRolling = $extval(jack_transport_state_t,"JackTransportRolling")
macdef JackTransportLooping = $extval(jack_transport_state_t,"JackTransportLooping")
macdef JackTransportStarting = $extval(jack_transport_state_t,"JackTransportStarting")
macdef JackTransportNetStarting = $extval(jack_transport_state_t,"JackTransportNetStarting")

typedef jack_unique_t = $extype"jack_unique_t"

abst@ype jack_position_bits_t = $extype"jack_position_bits_t"

macdef JackPositionBBT = $extval(jack_position_bits_t,"JackPositionBBT")
macdef JackPositionTimecode = $extval(jack_position_bits_t,"JackPositionTimecode")
macdef JackBBTFrameOffset = $extval(jack_position_bits_t,"JackBBTFrameOffset")
macdef JackAudioVideoRatio = $extval(jack_position_bits_t,"JackAudioVideoRatio")
macdef JackVideoFrameOffset = $extval(jack_position_bits_t,"JackVideoFrameOffset")

typedef struct__jack_position = $extype_struct"struct _jack_position" of {
   unique_1 = jack_unique_t
 , usecs = jack_time_t
 , frame_rate = jack_nframes_t
 , frame = jack_nframes_t
 , valid = jack_position_bits_t
 , bar = int32
 , beat = int32
 , tick = int32
 , bar_start_tick = double
 , beats_per_bar = float
 , beat_type = float
 , ticks_per_beat = double
 , beats_per_minute = double
 , frame_time = double
 , next_time = double
 , bbt_offset = jack_nframes_t
 , audio_frames_per_video_frame = float
 , video_offset = jack_nframes_t
 , padding = int32
 , unique_2 = jack_unique_t
}

typedef jack_position_t = $extype"jack_position_t"

typedef JackSyncCallback = (jack_transport_state_t, cPtr0(jack_position_t), ptr) -> int

typedef JackTimebaseCallback = (jack_transport_state_t, jack_nframes_t, cPtr0(jack_position_t), int, ptr) -> void

abst@ype jack_transport_bits_t = $extype"jack_transport_bits_t"

macdef JackTransportState = $extval(jack_transport_bits_t,"JackTransportState")
macdef JackTransportPosition = $extval(jack_transport_bits_t,"JackTransportPosition")
macdef JackTransportLoop = $extval(jack_transport_bits_t,"JackTransportLoop")
macdef JackTransportSMPTE = $extval(jack_transport_bits_t,"JackTransportSMPTE")
macdef JackTransportBBT = $extval(jack_transport_bits_t,"JackTransportBBT")

typedef jack_transport_info_t = $extype_struct"jack_transport_info_t" of {
   frame_rate = jack_nframes_t
 , usecs = jack_time_t
 , valid = jack_transport_bits_t
 , transport_state = jack_transport_state_t
 , frame = jack_nframes_t
 , loop_start = jack_nframes_t
 , loop_end = jack_nframes_t
 , smpte_offset = lint
 , smpte_frame_rate = float
 , bar = int
 , beat = int
 , tick = int
 , bar_start_tick = double
 , beats_per_bar = float
 , beat_type = float
 , ticks_per_beat = double
 , beats_per_minute = double
}

fun jack_release_timebase(cPtr0(jack_client_t)) : int = "mac#"

fun jack_set_sync_callback(cPtr0(jack_client_t), JackSyncCallback, ptr) : int = "mac#"

fun jack_set_sync_timeout(cPtr0(jack_client_t), jack_time_t) : int = "mac#"

fun jack_set_timebase_callback(cPtr0(jack_client_t), int, JackTimebaseCallback, ptr) : int = "mac#"

fun jack_transport_locate(cPtr0(jack_client_t), jack_nframes_t) : int = "mac#"

fun jack_transport_query(cPtr0(jack_client_t), cPtr0(jack_position_t)) : jack_transport_state_t = "mac#"

fun jack_get_current_transport_frame(cPtr0(jack_client_t)) : jack_nframes_t = "mac#"

fun jack_transport_reposition(cPtr0(jack_client_t), cPtr0(jack_position_t)) : int = "mac#"

fun jack_transport_start(cPtr0(jack_client_t)) : void = "mac#"

fun jack_transport_stop(cPtr0(jack_client_t)) : void = "mac#"

fun jack_get_transport_info(cPtr0(jack_client_t), cPtr0(jack_transport_info_t)) : void = "mac#"

fun jack_set_transport_info(cPtr0(jack_client_t), cPtr0(jack_transport_info_t)) : void = "mac#"

fun jack_get_version(cPtr0(int), cPtr0(int), cPtr0(int), cPtr0(int)) : void = "mac#"

fun jack_get_version_string() : cPtr0(char) = "mac#"
(*
fun jack_client_open(cPtr0(char), jack_options_t, cPtr0(jack_status_t), VARARGS) : cPtr0(jack_client_t) = "mac#"
*)
fun jack_client_new(cPtr0(char)) : cPtr0(jack_client_t) = "mac#"

fun jack_client_close(cPtr0(jack_client_t)) : int = "mac#"

fun jack_client_name_size() : int = "mac#"

fun jack_get_client_name(cPtr0(jack_client_t)) : cPtr0(char) = "mac#"

fun jack_get_uuid_for_client_name(cPtr0(jack_client_t), cPtr0(char)) : cPtr0(char) = "mac#"

fun jack_get_client_name_by_uuid(cPtr0(jack_client_t), cPtr0(char)) : cPtr0(char) = "mac#"

fun jack_internal_client_new(cPtr0(char), cPtr0(char), cPtr0(char)) : int = "mac#"

fun jack_internal_client_close(cPtr0(char)) : void = "mac#"

fun jack_activate(cPtr0(jack_client_t)) : int = "mac#"

fun jack_deactivate(cPtr0(jack_client_t)) : int = "mac#"

fun jack_get_client_pid(cPtr0(char)) : int = "mac#"

fun jack_client_thread_id(cPtr0(jack_client_t)) : jack_native_thread_t = "mac#"

fun jack_is_realtime(cPtr0(jack_client_t)) : int = "mac#"

fun jack_thread_wait(cPtr0(jack_client_t), int) : jack_nframes_t = "mac#"

fun jack_cycle_wait(cPtr0(jack_client_t)) : jack_nframes_t = "mac#"

fun jack_cycle_signal(cPtr0(jack_client_t), int) : void = "mac#"

fun jack_set_process_thread(cPtr0(jack_client_t), JackThreadCallback, ptr) : int = "mac#"

fun jack_set_thread_init_callback(cPtr0(jack_client_t), JackThreadInitCallback, ptr) : int = "mac#"

fun jack_on_shutdown(cPtr0(jack_client_t), JackShutdownCallback, ptr) : void = "mac#"

fun jack_on_info_shutdown(cPtr0(jack_client_t), JackInfoShutdownCallback, ptr) : void = "mac#"

fun jack_set_process_callback(cPtr0(jack_client_t), JackProcessCallback, ptr) : int = "mac#"

fun jack_set_freewheel_callback(cPtr0(jack_client_t), JackFreewheelCallback, ptr) : int = "mac#"

fun jack_set_buffer_size_callback(cPtr0(jack_client_t), JackBufferSizeCallback, ptr) : int = "mac#"

fun jack_set_sample_rate_callback(cPtr0(jack_client_t), JackSampleRateCallback, ptr) : int = "mac#"

fun jack_set_client_registration_callback(cPtr0(jack_client_t), JackClientRegistrationCallback, ptr) : int = "mac#"

fun jack_set_port_registration_callback(cPtr0(jack_client_t), JackPortRegistrationCallback, ptr) : int = "mac#"

fun jack_set_port_connect_callback(cPtr0(jack_client_t), JackPortConnectCallback, ptr) : int = "mac#"

fun jack_set_port_rename_callback(cPtr0(jack_client_t), JackPortRenameCallback, ptr) : int = "mac#"

fun jack_set_graph_order_callback(cPtr0(jack_client_t), JackGraphOrderCallback, ptr) : int = "mac#"

fun jack_set_xrun_callback(cPtr0(jack_client_t), JackXRunCallback, ptr) : int = "mac#"

fun jack_set_latency_callback(cPtr0(jack_client_t), JackLatencyCallback, ptr) : int = "mac#"

fun jack_set_freewheel(cPtr0(jack_client_t), int) : int = "mac#"

fun jack_set_buffer_size(cPtr0(jack_client_t), jack_nframes_t) : int = "mac#"

fun jack_get_sample_rate(cPtr0(jack_client_t)) : jack_nframes_t = "mac#"

fun jack_get_buffer_size(cPtr0(jack_client_t)) : jack_nframes_t = "mac#"

fun jack_engine_takeover_timebase(cPtr0(jack_client_t)) : int = "mac#"

fun jack_cpu_load(cPtr0(jack_client_t)) : float = "mac#"

fun jack_port_register(cPtr0(jack_client_t), cPtr0(char), cPtr0(char), ulint, ulint) : cPtr0(jack_port_t) = "mac#"

fun jack_port_unregister(cPtr0(jack_client_t), cPtr0(jack_port_t)) : int = "mac#"

fun jack_port_get_buffer(cPtr0(jack_port_t), jack_nframes_t) : ptr = "mac#"

fun jack_port_uuid(cPtr0(jack_port_t)) : jack_uuid_t = "mac#"

fun jack_port_name(cPtr0(jack_port_t)) : cPtr0(char) = "mac#"

fun jack_port_short_name(cPtr0(jack_port_t)) : cPtr0(char) = "mac#"

fun jack_port_flags(cPtr0(jack_port_t)) : int = "mac#"

fun jack_port_type(cPtr0(jack_port_t)) : cPtr0(char) = "mac#"

fun jack_port_type_id(cPtr0(jack_port_t)) : jack_port_type_id_t = "mac#"

fun jack_port_is_mine(cPtr0(jack_client_t), cPtr0(jack_port_t)) : int = "mac#"

fun jack_port_connected(cPtr0(jack_port_t)) : int = "mac#"

fun jack_port_connected_to(cPtr0(jack_port_t), cPtr0(char)) : int = "mac#"

fun jack_port_get_connections(cPtr0(jack_port_t)) : cPtr0(cPtr0(char)) = "mac#"

fun jack_port_get_all_connections(cPtr0(jack_client_t), cPtr0(jack_port_t)) : cPtr0(cPtr0(char)) = "mac#"

fun jack_port_tie(cPtr0(jack_port_t), cPtr0(jack_port_t)) : int = "mac#"

fun jack_port_untie(cPtr0(jack_port_t)) : int = "mac#"

fun jack_port_set_name(cPtr0(jack_port_t), cPtr0(char)) : int = "mac#"

fun jack_port_rename(cPtr0(jack_client_t), cPtr0(jack_port_t), cPtr0(char)) : int = "mac#"

fun jack_port_set_alias(cPtr0(jack_port_t), cPtr0(char)) : int = "mac#"

fun jack_port_unset_alias(cPtr0(jack_port_t), cPtr0(char)) : int = "mac#"

fun jack_port_get_aliases(cPtr0(jack_port_t), cPtr0(cPtr0(char))) : int = "mac#"

fun jack_port_request_monitor(cPtr0(jack_port_t), int) : int = "mac#"

fun jack_port_request_monitor_by_name(cPtr0(jack_client_t), cPtr0(char), int) : int = "mac#"

fun jack_port_ensure_monitor(cPtr0(jack_port_t), int) : int = "mac#"

fun jack_port_monitoring_input(cPtr0(jack_port_t)) : int = "mac#"

fun jack_connect(cPtr0(jack_client_t), cPtr0(char), cPtr0(char)) : int = "mac#"

fun jack_disconnect(cPtr0(jack_client_t), cPtr0(char), cPtr0(char)) : int = "mac#"

fun jack_port_disconnect(cPtr0(jack_client_t), cPtr0(jack_port_t)) : int = "mac#"

fun jack_port_name_size() : int = "mac#"

fun jack_port_type_size() : int = "mac#"

fun jack_port_type_get_buffer_size(cPtr0(jack_client_t), cPtr0(char)) : size_t = "mac#"

fun jack_port_set_latency(cPtr0(jack_port_t), jack_nframes_t) : void = "mac#"

fun jack_port_get_latency_range(cPtr0(jack_port_t), jack_latency_callback_mode_t, cPtr0(jack_latency_range_t)) : void = "mac#"

fun jack_port_set_latency_range(cPtr0(jack_port_t), jack_latency_callback_mode_t, cPtr0(jack_latency_range_t)) : void = "mac#"

fun jack_recompute_total_latencies(cPtr0(jack_client_t)) : int = "mac#"

fun jack_port_get_latency(cPtr0(jack_port_t)) : jack_nframes_t = "mac#"

fun jack_port_get_total_latency(cPtr0(jack_client_t), cPtr0(jack_port_t)) : jack_nframes_t = "mac#"

fun jack_recompute_total_latency(cPtr0(jack_client_t), cPtr0(jack_port_t)) : int = "mac#"

fun jack_get_ports(cPtr0(jack_client_t), cPtr0(char), cPtr0(char), ulint) : cPtr0(cPtr0(char)) = "mac#"

fun jack_port_by_name(cPtr0(jack_client_t), cPtr0(char)) : cPtr0(jack_port_t) = "mac#"

fun jack_port_by_id(cPtr0(jack_client_t), jack_port_id_t) : cPtr0(jack_port_t) = "mac#"

fun jack_frames_since_cycle_start(cPtr0(jack_client_t)) : jack_nframes_t = "mac#"

fun jack_frame_time(cPtr0(jack_client_t)) : jack_nframes_t = "mac#"

fun jack_last_frame_time(cPtr0(jack_client_t)) : jack_nframes_t = "mac#"

fun jack_get_cycle_times(cPtr0(jack_client_t), cPtr0(jack_nframes_t), cPtr0(jack_time_t), cPtr0(jack_time_t), cPtr0(float)) : int = "mac#"

fun jack_frames_to_time(cPtr0(jack_client_t), jack_nframes_t) : jack_time_t = "mac#"

fun jack_time_to_frames(cPtr0(jack_client_t), jack_time_t) : jack_nframes_t = "mac#"

fun jack_get_time() : jack_time_t = "mac#"

fun jack_set_error_function((cPtr0(char)) -> void) : void = "mac#"

fun jack_set_info_function((cPtr0(char)) -> void) : void = "mac#"

fun jack_free(ptr) : void = "mac#"

