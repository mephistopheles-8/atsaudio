(** Generated by [c2ats-ats2] **)

%{#
#include <AL/al.h>
%}
(**  **)

typedef ALboolean = $extype"ALboolean"

typedef ALchar = $extype"ALchar"

typedef ALbyte = $extype"ALbyte"

typedef ALubyte = $extype"ALubyte"

typedef ALshort = $extype"ALshort"

typedef ALushort = $extype"ALushort"

typedef ALint = $extype"ALint"

typedef ALuint = $extype"ALuint"

typedef ALsizei = $extype"ALsizei"

typedef ALenum = $extype"ALenum"

typedef ALfloat = $extype"ALfloat"

typedef ALdouble = $extype"ALdouble"

typedef ALvoid = $extype"ALvoid"

macdef ALAPI = $extval(ALenum,"ALAPI")
macdef AL_ORIENTATION = $extval(ALenum,"AL_ORIENTATION")
macdef AL_FORMAT_MONO16 = $extval(ALenum,"AL_FORMAT_MONO16")
macdef AL_BYTE_OFFSET = $extval(ALenum,"AL_BYTE_OFFSET")
macdef AL_POSITION = $extval(ALenum,"AL_POSITION")
macdef AL_EXPONENT_DISTANCE_CLAMPED = $extval(ALenum,"AL_EXPONENT_DISTANCE_CLAMPED")
macdef AL_PAUSED = $extval(ALenum,"AL_PAUSED")
macdef AL_EXPONENT_DISTANCE = $extval(ALenum,"AL_EXPONENT_DISTANCE")
macdef AL_STATIC = $extval(ALenum,"AL_STATIC")
macdef AL_DISTANCE_MODEL = $extval(ALenum,"AL_DISTANCE_MODEL")
macdef AL_SOURCE_TYPE = $extval(ALenum,"AL_SOURCE_TYPE")
macdef AL_INVALID_NAME = $extval(ALenum,"AL_INVALID_NAME")
macdef AL_TRUE = $extval(ALenum,"AL_TRUE")
macdef AL_INVALID_VALUE = $extval(ALenum,"AL_INVALID_VALUE")
macdef AL_NONE = $extval(ALenum,"AL_NONE")
macdef AL_FORMAT_STEREO8 = $extval(ALenum,"AL_FORMAT_STEREO8")
macdef AL_SPEED_OF_SOUND = $extval(ALenum,"AL_SPEED_OF_SOUND")
macdef AL_INVALID_OPERATION = $extval(ALenum,"AL_INVALID_OPERATION")
macdef AL_EXTENSIONS = $extval(ALenum,"AL_EXTENSIONS")
macdef AL_ILLEGAL_ENUM = $extval(ALenum,"AL_ILLEGAL_ENUM")
macdef AL_ILLEGAL_COMMAND = $extval(ALenum,"AL_ILLEGAL_COMMAND")
macdef AL_API = $extval(ALenum,"AL_API")
macdef AL_STREAMING = $extval(ALenum,"AL_STREAMING")
macdef AL_BITS = $extval(ALenum,"AL_BITS")
macdef AL_PENDING = $extval(ALenum,"AL_PENDING")
macdef AL_PROCESSED = $extval(ALenum,"AL_PROCESSED")
macdef AL_VERSION = $extval(ALenum,"AL_VERSION")
macdef AL_STOPPED = $extval(ALenum,"AL_STOPPED")
macdef AL_BUFFER = $extval(ALenum,"AL_BUFFER")
macdef AL_SEC_OFFSET = $extval(ALenum,"AL_SEC_OFFSET")
macdef AL_SOURCE_STATE = $extval(ALenum,"AL_SOURCE_STATE")
macdef AL_CONE_OUTER_GAIN = $extval(ALenum,"AL_CONE_OUTER_GAIN")
macdef AL_SIZE = $extval(ALenum,"AL_SIZE")
macdef AL_PLAYING = $extval(ALenum,"AL_PLAYING")
macdef AL_DOPPLER_VELOCITY = $extval(ALenum,"AL_DOPPLER_VELOCITY")
macdef AL_APIENTRY = $extval(ALenum,"AL_APIENTRY")
macdef ALAPIENTRY = $extval(ALenum,"ALAPIENTRY")
macdef AL_CONE_OUTER_ANGLE = $extval(ALenum,"AL_CONE_OUTER_ANGLE")
macdef AL_REFERENCE_DISTANCE = $extval(ALenum,"AL_REFERENCE_DISTANCE")
macdef AL_VERSION_1_0 = $extval(ALenum,"AL_VERSION_1_0")
macdef AL_VERSION_1_1 = $extval(ALenum,"AL_VERSION_1_1")
macdef AL_SOURCE_RELATIVE = $extval(ALenum,"AL_SOURCE_RELATIVE")
macdef AL_LOOPING = $extval(ALenum,"AL_LOOPING")
macdef AL_UNDETERMINED = $extval(ALenum,"AL_UNDETERMINED")
macdef OPENAL = $extval(ALenum,"OPENAL")
macdef AL_BUFFERS_QUEUED = $extval(ALenum,"AL_BUFFERS_QUEUED")
macdef AL_NO_ERROR = $extval(ALenum,"AL_NO_ERROR")
macdef AL_INVALID_ENUM = $extval(ALenum,"AL_INVALID_ENUM")
macdef AL_CHANNELS = $extval(ALenum,"AL_CHANNELS")
macdef AL_FALSE = $extval(ALenum,"AL_FALSE")
macdef AL_UNUSED = $extval(ALenum,"AL_UNUSED")
macdef AL_CONE_INNER_ANGLE = $extval(ALenum,"AL_CONE_INNER_ANGLE")
macdef AL_LINEAR_DISTANCE = $extval(ALenum,"AL_LINEAR_DISTANCE")
macdef AL_INVERSE_DISTANCE_CLAMPED = $extval(ALenum,"AL_INVERSE_DISTANCE_CLAMPED")
macdef AL_MIN_GAIN = $extval(ALenum,"AL_MIN_GAIN")
macdef AL_SAMPLE_OFFSET = $extval(ALenum,"AL_SAMPLE_OFFSET")
macdef AL_RENDERER = $extval(ALenum,"AL_RENDERER")
macdef AL_OUT_OF_MEMORY = $extval(ALenum,"AL_OUT_OF_MEMORY")
macdef AL_FORMAT_MONO8 = $extval(ALenum,"AL_FORMAT_MONO8")
macdef AL_MAX_GAIN = $extval(ALenum,"AL_MAX_GAIN")
macdef AL_BUFFERS_PROCESSED = $extval(ALenum,"AL_BUFFERS_PROCESSED")
macdef AL_MAX_DISTANCE = $extval(ALenum,"AL_MAX_DISTANCE")
macdef AL_FREQUENCY = $extval(ALenum,"AL_FREQUENCY")
macdef AL_INITIAL = $extval(ALenum,"AL_INITIAL")
macdef AL_LINEAR_DISTANCE_CLAMPED = $extval(ALenum,"AL_LINEAR_DISTANCE_CLAMPED")
macdef AL_FORMAT_STEREO16 = $extval(ALenum,"AL_FORMAT_STEREO16")
macdef AL_VENDOR = $extval(ALenum,"AL_VENDOR")
macdef AL_AL_H = $extval(ALenum,"AL_AL_H")
macdef AL_VELOCITY = $extval(ALenum,"AL_VELOCITY")
macdef AL_GAIN = $extval(ALenum,"AL_GAIN")
macdef AL_PITCH = $extval(ALenum,"AL_PITCH")
macdef AL_DIRECTION = $extval(ALenum,"AL_DIRECTION")
macdef AL_DOPPLER_FACTOR = $extval(ALenum,"AL_DOPPLER_FACTOR")
macdef AL_INVALID = $extval(ALenum,"AL_INVALID")
macdef AL_ROLLOFF_FACTOR = $extval(ALenum,"AL_ROLLOFF_FACTOR")
macdef AL_INVERSE_DISTANCE = $extval(ALenum,"AL_INVERSE_DISTANCE")


fun alDopplerFactor(ALfloat) : void = "mac#"

fun alDopplerVelocity(ALfloat) : void = "mac#"

fun alSpeedOfSound(ALfloat) : void = "mac#"

fun alDistanceModel(ALenum) : void = "mac#"

fun alEnable(ALenum) : void = "mac#"

fun alDisable(ALenum) : void = "mac#"

fun alIsEnabled(ALenum) : ALboolean = "mac#"

fun alGetString(ALenum) : cPtr0(ALchar) = "mac#"

fun alGetBooleanv(ALenum, cPtr0(ALboolean)) : void = "mac#"

fun alGetIntegerv(ALenum, cPtr0(ALint)) : void = "mac#"

fun alGetFloatv(ALenum, cPtr0(ALfloat)) : void = "mac#"

fun alGetDoublev(ALenum, cPtr0(ALdouble)) : void = "mac#"

fun alGetBoolean(ALenum) : ALboolean = "mac#"

fun alGetInteger(ALenum) : ALint = "mac#"

fun alGetFloat(ALenum) : ALfloat = "mac#"

fun alGetDouble(ALenum) : ALdouble = "mac#"

fun alGetError() : ALenum = "mac#"

fun alIsExtensionPresent(cPtr0(ALchar)) : ALboolean = "mac#"

fun alGetProcAddress(cPtr0(ALchar)) : ptr = "mac#"

fun alGetEnumValue(cPtr0(ALchar)) : ALenum = "mac#"

fun alListenerf(ALenum, ALfloat) : void = "mac#"

fun alListener3f(ALenum, ALfloat, ALfloat, ALfloat) : void = "mac#"

fun alListenerfv(ALenum, cPtr0(ALfloat)) : void = "mac#"

fun alListeneri(ALenum, ALint) : void = "mac#"

fun alListener3i(ALenum, ALint, ALint, ALint) : void = "mac#"

fun alListeneriv(ALenum, cPtr0(ALint)) : void = "mac#"

fun alGetListenerf(ALenum, cPtr0(ALfloat)) : void = "mac#"

fun alGetListener3f(ALenum, cPtr0(ALfloat), cPtr0(ALfloat), cPtr0(ALfloat)) : void = "mac#"

fun alGetListenerfv(ALenum, cPtr0(ALfloat)) : void = "mac#"

fun alGetListeneri(ALenum, cPtr0(ALint)) : void = "mac#"

fun alGetListener3i(ALenum, cPtr0(ALint), cPtr0(ALint), cPtr0(ALint)) : void = "mac#"

fun alGetListeneriv(ALenum, cPtr0(ALint)) : void = "mac#"

fun alGenSources(ALsizei, cPtr0(ALuint)) : void = "mac#"

fun alDeleteSources(ALsizei, cPtr0(ALuint)) : void = "mac#"

fun alIsSource(ALuint) : ALboolean = "mac#"

fun alSourcef(ALuint, ALenum, ALfloat) : void = "mac#"

fun alSource3f(ALuint, ALenum, ALfloat, ALfloat, ALfloat) : void = "mac#"

fun alSourcefv(ALuint, ALenum, cPtr0(ALfloat)) : void = "mac#"

fun alSourcei(ALuint, ALenum, ALint) : void = "mac#"

fun alSource3i(ALuint, ALenum, ALint, ALint, ALint) : void = "mac#"

fun alSourceiv(ALuint, ALenum, cPtr0(ALint)) : void = "mac#"

fun alGetSourcef(ALuint, ALenum, cPtr0(ALfloat)) : void = "mac#"

fun alGetSource3f(ALuint, ALenum, cPtr0(ALfloat), cPtr0(ALfloat), cPtr0(ALfloat)) : void = "mac#"

fun alGetSourcefv(ALuint, ALenum, cPtr0(ALfloat)) : void = "mac#"

fun alGetSourcei(ALuint, ALenum, cPtr0(ALint)) : void = "mac#"

fun alGetSource3i(ALuint, ALenum, cPtr0(ALint), cPtr0(ALint), cPtr0(ALint)) : void = "mac#"

fun alGetSourceiv(ALuint, ALenum, cPtr0(ALint)) : void = "mac#"

fun alSourcePlayv(ALsizei, cPtr0(ALuint)) : void = "mac#"

fun alSourceStopv(ALsizei, cPtr0(ALuint)) : void = "mac#"

fun alSourceRewindv(ALsizei, cPtr0(ALuint)) : void = "mac#"

fun alSourcePausev(ALsizei, cPtr0(ALuint)) : void = "mac#"

fun alSourcePlay(ALuint) : void = "mac#"

fun alSourceStop(ALuint) : void = "mac#"

fun alSourceRewind(ALuint) : void = "mac#"

fun alSourcePause(ALuint) : void = "mac#"

fun alSourceQueueBuffers(ALuint, ALsizei, cPtr0(ALuint)) : void = "mac#"

fun alSourceUnqueueBuffers(ALuint, ALsizei, cPtr0(ALuint)) : void = "mac#"

fun alGenBuffers(ALsizei, cPtr0(ALuint)) : void = "mac#"

fun alDeleteBuffers(ALsizei, cPtr0(ALuint)) : void = "mac#"

fun alIsBuffer(ALuint) : ALboolean = "mac#"

fun alBufferData(ALuint, ALenum, cPtr0(ALvoid), ALsizei, ALsizei) : void = "mac#"

fun alBufferf(ALuint, ALenum, ALfloat) : void = "mac#"

fun alBuffer3f(ALuint, ALenum, ALfloat, ALfloat, ALfloat) : void = "mac#"

fun alBufferfv(ALuint, ALenum, cPtr0(ALfloat)) : void = "mac#"

fun alBufferi(ALuint, ALenum, ALint) : void = "mac#"

fun alBuffer3i(ALuint, ALenum, ALint, ALint, ALint) : void = "mac#"

fun alBufferiv(ALuint, ALenum, cPtr0(ALint)) : void = "mac#"

fun alGetBufferf(ALuint, ALenum, cPtr0(ALfloat)) : void = "mac#"

fun alGetBuffer3f(ALuint, ALenum, cPtr0(ALfloat), cPtr0(ALfloat), cPtr0(ALfloat)) : void = "mac#"

fun alGetBufferfv(ALuint, ALenum, cPtr0(ALfloat)) : void = "mac#"

fun alGetBufferi(ALuint, ALenum, cPtr0(ALint)) : void = "mac#"

fun alGetBuffer3i(ALuint, ALenum, cPtr0(ALint), cPtr0(ALint), cPtr0(ALint)) : void = "mac#"

fun alGetBufferiv(ALuint, ALenum, cPtr0(ALint)) : void = "mac#"

typedef LPALENABLE = (ALenum) -> void

typedef LPALDISABLE = (ALenum) -> void

typedef LPALISENABLED = (ALenum) -> ALboolean

typedef LPALGETSTRING = $extype"LPALGETSTRING"

typedef LPALGETBOOLEANV = (ALenum, cPtr0(ALboolean)) -> void

typedef LPALGETINTEGERV = (ALenum, cPtr0(ALint)) -> void

typedef LPALGETFLOATV = (ALenum, cPtr0(ALfloat)) -> void

typedef LPALGETDOUBLEV = (ALenum, cPtr0(ALdouble)) -> void

typedef LPALGETBOOLEAN = (ALenum) -> ALboolean

typedef LPALGETINTEGER = (ALenum) -> ALint

typedef LPALGETFLOAT = (ALenum) -> ALfloat

typedef LPALGETDOUBLE = (ALenum) -> ALdouble

typedef LPALGETERROR = () -> ALenum

typedef LPALISEXTENSIONPRESENT = (cPtr0(ALchar)) -> ALboolean

typedef LPALGETPROCADDRESS = (cPtr0(ALchar)) -> ptr

typedef LPALGETENUMVALUE = (cPtr0(ALchar)) -> ALenum

typedef LPALLISTENERF = (ALenum, ALfloat) -> void

typedef LPALLISTENER3F = (ALenum, ALfloat, ALfloat, ALfloat) -> void

typedef LPALLISTENERFV = (ALenum, cPtr0(ALfloat)) -> void

typedef LPALLISTENERI = (ALenum, ALint) -> void

typedef LPALLISTENER3I = (ALenum, ALint, ALint, ALint) -> void

typedef LPALLISTENERIV = (ALenum, cPtr0(ALint)) -> void

typedef LPALGETLISTENERF = (ALenum, cPtr0(ALfloat)) -> void

typedef LPALGETLISTENER3F = (ALenum, cPtr0(ALfloat), cPtr0(ALfloat), cPtr0(ALfloat)) -> void

typedef LPALGETLISTENERFV = (ALenum, cPtr0(ALfloat)) -> void

typedef LPALGETLISTENERI = (ALenum, cPtr0(ALint)) -> void

typedef LPALGETLISTENER3I = (ALenum, cPtr0(ALint), cPtr0(ALint), cPtr0(ALint)) -> void

typedef LPALGETLISTENERIV = (ALenum, cPtr0(ALint)) -> void

typedef LPALGENSOURCES = (ALsizei, cPtr0(ALuint)) -> void

typedef LPALDELETESOURCES = (ALsizei, cPtr0(ALuint)) -> void

typedef LPALISSOURCE = (ALuint) -> ALboolean

typedef LPALSOURCEF = (ALuint, ALenum, ALfloat) -> void

typedef LPALSOURCE3F = (ALuint, ALenum, ALfloat, ALfloat, ALfloat) -> void

typedef LPALSOURCEFV = (ALuint, ALenum, cPtr0(ALfloat)) -> void

typedef LPALSOURCEI = (ALuint, ALenum, ALint) -> void

typedef LPALSOURCE3I = (ALuint, ALenum, ALint, ALint, ALint) -> void

typedef LPALSOURCEIV = (ALuint, ALenum, cPtr0(ALint)) -> void

typedef LPALGETSOURCEF = (ALuint, ALenum, cPtr0(ALfloat)) -> void

typedef LPALGETSOURCE3F = (ALuint, ALenum, cPtr0(ALfloat), cPtr0(ALfloat), cPtr0(ALfloat)) -> void

typedef LPALGETSOURCEFV = (ALuint, ALenum, cPtr0(ALfloat)) -> void

typedef LPALGETSOURCEI = (ALuint, ALenum, cPtr0(ALint)) -> void

typedef LPALGETSOURCE3I = (ALuint, ALenum, cPtr0(ALint), cPtr0(ALint), cPtr0(ALint)) -> void

typedef LPALGETSOURCEIV = (ALuint, ALenum, cPtr0(ALint)) -> void

typedef LPALSOURCEPLAYV = (ALsizei, cPtr0(ALuint)) -> void

typedef LPALSOURCESTOPV = (ALsizei, cPtr0(ALuint)) -> void

typedef LPALSOURCEREWINDV = (ALsizei, cPtr0(ALuint)) -> void

typedef LPALSOURCEPAUSEV = (ALsizei, cPtr0(ALuint)) -> void

typedef LPALSOURCEPLAY = (ALuint) -> void

typedef LPALSOURCESTOP = (ALuint) -> void

typedef LPALSOURCEREWIND = (ALuint) -> void

typedef LPALSOURCEPAUSE = (ALuint) -> void

typedef LPALSOURCEQUEUEBUFFERS = (ALuint, ALsizei, cPtr0(ALuint)) -> void

typedef LPALSOURCEUNQUEUEBUFFERS = (ALuint, ALsizei, cPtr0(ALuint)) -> void

typedef LPALGENBUFFERS = (ALsizei, cPtr0(ALuint)) -> void

typedef LPALDELETEBUFFERS = (ALsizei, cPtr0(ALuint)) -> void

typedef LPALISBUFFER = (ALuint) -> ALboolean

typedef LPALBUFFERDATA = (ALuint, ALenum, cPtr0(ALvoid), ALsizei, ALsizei) -> void

typedef LPALBUFFERF = (ALuint, ALenum, ALfloat) -> void

typedef LPALBUFFER3F = (ALuint, ALenum, ALfloat, ALfloat, ALfloat) -> void

typedef LPALBUFFERFV = (ALuint, ALenum, cPtr0(ALfloat)) -> void

typedef LPALBUFFERI = (ALuint, ALenum, ALint) -> void

typedef LPALBUFFER3I = (ALuint, ALenum, ALint, ALint, ALint) -> void

typedef LPALBUFFERIV = (ALuint, ALenum, cPtr0(ALint)) -> void

typedef LPALGETBUFFERF = (ALuint, ALenum, cPtr0(ALfloat)) -> void

typedef LPALGETBUFFER3F = (ALuint, ALenum, cPtr0(ALfloat), cPtr0(ALfloat), cPtr0(ALfloat)) -> void

typedef LPALGETBUFFERFV = (ALuint, ALenum, cPtr0(ALfloat)) -> void

typedef LPALGETBUFFERI = (ALuint, ALenum, cPtr0(ALint)) -> void

typedef LPALGETBUFFER3I = (ALuint, ALenum, cPtr0(ALint), cPtr0(ALint), cPtr0(ALint)) -> void

typedef LPALGETBUFFERIV = (ALuint, ALenum, cPtr0(ALint)) -> void

typedef LPALDOPPLERFACTOR = (ALfloat) -> void

typedef LPALDOPPLERVELOCITY = (ALfloat) -> void

typedef LPALSPEEDOFSOUND = (ALfloat) -> void

typedef LPALDISTANCEMODEL = (ALenum) -> void

